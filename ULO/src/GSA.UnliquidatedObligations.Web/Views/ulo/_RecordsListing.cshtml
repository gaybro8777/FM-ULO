@using GSA.UnliquidatedObligations.Web.Controllers
@using GSA.UnliquidatedObligations.BusinessLayer.Data
@using System.Linq
@model IEnumerable<Workflow>
@{
    var workflowDescription = (GSA.UnliquidatedObligations.BusinessLayer.Workflow.IWorkflowDescription)ViewBag.WorkflowDescription;
    var todaysDate = DateTime.Today;
    var allAreUnassigned = ViewBag.AllAreUnassigned is bool ? (bool)ViewBag.AllAreUnassigned : false;
    var showReassignmentButton = allAreUnassigned || (ViewBag.ShowReassignButton is bool ? (bool)ViewBag.ShowReassignButton : false);
    var userReassignRegions = User.GetReassignmentGroupRegions();
    var rfrIdByWorkflow = new Dictionary<Workflow, int?>();


    var hasData = false;
    var noDataMessage = ViewBag.NoDataMessage as string ?? AspHelpers.NoResultsMessage;
    if (ViewBag.TotalItemCount != null)
    {
        hasData = (int)ViewBag.TotalItemCount > 0;
    }
    var viewDateByWorkflowId = ViewBag.ViewDateByWorkflowId as IDictionary<int, DateTime> ?? new Dictionary<int, DateTime>();
}
@if (!hasData)
{
    <div class="noDataMessage">@noDataMessage</div>
}
else
{
<table class="table table-responsive active-workflows">
    <tr>
        <th>
            @Html.SortableHeaderFor(z => z.TargetUloId, overrideDisplayName: "ULO ID")
        </th>
        @*
    <th>
        @Html.SortableHeaderFor(z => z.UnliquidatedObligation.ReviewId, overrideDisplayName: "Review ID")
    </th>
        *@
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Review.ReviewName, overrideDisplayName: "Review")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Region.RegionNumber, overrideDisplayName: "Region")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.PegasysDocumentNumber, overrideDisplayName: "PDN")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Prog, overrideDisplayName: "BA Code")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Status, overrideDisplayName: "Review Status")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Organization, overrideDisplayName: "Org")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.TotalLine, overrideDisplayName: "Amount")
        </th>
        <th>
            @Html.SortableHeaderFor(z => z.UnliquidatedObligation.Valid, overrideDisplayName: "Valid")
        </th>
        @if (showReassignmentButton)
        {
            <th></th>
        }
    </tr>

    @foreach (var item in Model)
    {
        <tr class="active-workflows-record @(viewDateByWorkflowId.ContainsKey(item.WorkflowId)?"viewed":"")" data-id="@item.WorkflowId">
            <td>
                @Html.ActionLink("View ULO " + item.TargetUloId.ToString(), UloController.ActionNames.Details, UloController.Name, new { uloId = item.UnliquidatedObligation.UloId, workflowId = item.WorkflowId }, null)
            </td>
            @*
    <td>
        @Html.DisplayFor(modelItem => item.UnliquidatedObligation.ReviewId)
    </td>
            *@
            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.Review.ReviewName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.Region.RegionNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.PegasysDocumentNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.Prog)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnliquidatedObligation.Organization)
            </td>
            <td>
                @Html.Currency(Convert.ToDecimal(item.UnliquidatedObligation.TotalLine))
            </td>
            <td>
                @Html.DisplayIsValid(item.UnliquidatedObligation.Valid)
            </td>
            <td>
                @if (showReassignmentButton)
                {
                    int? rfrId = allAreUnassigned ? null : item.GetReassignmentRequest()?.RequestForReassignmentID;
                    if (allAreUnassigned || rfrId != null)
                    {
                        rfrIdByWorkflow[item] = rfrId;
                        var modalId = "#" + item.WorkflowId + "RequestForReassignModal";
                        <button type="button" class="btn btn-primary master request-active" data-toggle="modal" data-target="@modalId">
                            Reassign
                        </button>
                    }
                }
            </td>
        </tr>
                    }
</table>
    if (showReassignmentButton && rfrIdByWorkflow.Count > 0)
    {
        var bulkToken = ViewBag.DetailsBulkToken as RequestForReassignmentsController.DetailsBulkToken;
        foreach (var kvp in rfrIdByWorkflow)
        {
            var rfrId = kvp.Value;
            var wf = kvp.Key;
            Html.RenderAction(RequestForReassignmentsController.ActionNames.Details, RequestForReassignmentsController.Name, new { workflowId = wf.WorkflowId, uloRegionId = wf.UnliquidatedObligation.RegionId, isAdmin = true, id = rfrId, bulkToken = bulkToken });
        }
    }
@Html.Partial("_PaginationPartial")
}
